//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Body when register user */
public class UserRegistrationBody: APIModel {

    /** Body when register user */
    public enum Trainer: String, Codable, Equatable, CaseIterable {
        case trainer = "trainer"
    }

    public var trainer: Trainer

    public var email: String

    public var password: String

    public var passwordConfirmation: String

    public var firstName: String?

    public var lastName: String?

    public var phone: String?

    public init(trainer: Trainer, email: String, password: String, passwordConfirmation: String, firstName: String? = nil, lastName: String? = nil, phone: String? = nil) {
        self.trainer = trainer
        self.email = email
        self.password = password
        self.passwordConfirmation = passwordConfirmation
        self.firstName = firstName
        self.lastName = lastName
        self.phone = phone
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        trainer = try container.decode("trainer")
        email = try container.decode("email")
        password = try container.decode("password")
        passwordConfirmation = try container.decode("password_confirmation")
        firstName = try container.decodeIfPresent("first_name")
        lastName = try container.decodeIfPresent("last_name")
        phone = try container.decodeIfPresent("phone")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(trainer, forKey: "trainer")
        try container.encode(email, forKey: "email")
        try container.encode(password, forKey: "password")
        try container.encode(passwordConfirmation, forKey: "password_confirmation")
        try container.encodeIfPresent(firstName, forKey: "first_name")
        try container.encodeIfPresent(lastName, forKey: "last_name")
        try container.encodeIfPresent(phone, forKey: "phone")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? UserRegistrationBody else { return false }
      guard self.trainer == object.trainer else { return false }
      guard self.email == object.email else { return false }
      guard self.password == object.password else { return false }
      guard self.passwordConfirmation == object.passwordConfirmation else { return false }
      guard self.firstName == object.firstName else { return false }
      guard self.lastName == object.lastName else { return false }
      guard self.phone == object.phone else { return false }
      return true
    }

    public static func == (lhs: UserRegistrationBody, rhs: UserRegistrationBody) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
