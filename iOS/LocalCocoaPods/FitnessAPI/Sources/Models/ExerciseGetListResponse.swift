//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class ExerciseGetListResponse: APIModel {

    public var message: [Message]

    public class Message: APIModel {

        public var name: String?

        public var description: String?

        public var videoUrl: String?

        public var equipment: String?

        public var userId: String?

        public var id: Int?

        public init(name: String?, description: String?, videoUrl: String?, equipment: String?, userId: String?, id: Int? = nil) {
            self.name = name
            self.description = description
            self.videoUrl = videoUrl
            self.equipment = equipment
            self.userId = userId
            self.id = id
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            name = try container.decodeIfPresent("name")
            description = try container.decodeIfPresent("description")
            videoUrl = try container.decodeIfPresent("videoUrl")
            equipment = try container.decodeIfPresent("equipment")
            userId = try container.decodeIfPresent("user_id")
            id = try container.decodeIfPresent("id")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encodeIfPresent(name, forKey: "name")
            try container.encodeIfPresent(description, forKey: "description")
            try container.encodeIfPresent(videoUrl, forKey: "videoUrl")
            try container.encodeIfPresent(equipment, forKey: "equipment")
            try container.encodeIfPresent(userId, forKey: "user_id")
            try container.encodeIfPresent(id, forKey: "id")
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Message else { return false }
          guard self.name == object.name else { return false }
          guard self.description == object.description else { return false }
          guard self.videoUrl == object.videoUrl else { return false }
          guard self.equipment == object.equipment else { return false }
          guard self.userId == object.userId else { return false }
          guard self.id == object.id else { return false }
          return true
        }

        public static func == (lhs: Message, rhs: Message) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(message: [Message]) {
        self.message = message
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        message = try container.decodeArray("message")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(message, forKey: "message")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ExerciseGetListResponse else { return false }
      guard self.message == object.message else { return false }
      return true
    }

    public static func == (lhs: ExerciseGetListResponse, rhs: ExerciseGetListResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
