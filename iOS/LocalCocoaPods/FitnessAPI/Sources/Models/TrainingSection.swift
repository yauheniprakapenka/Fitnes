//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public enum TrainingSection: Codable, Equatable {
    case emomTrainingSection(EmomTrainingSection)
    case restTrainingSection(RestTrainingSection)
    case amrapOrForTimeTrainingSection(AmrapOrForTimeTrainingSection)

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)
        let discriminator: String = try container.decode("section_type")
        switch discriminator {
        case "AMRAP":
            self = .amrapOrForTimeTrainingSection(try AmrapOrForTimeTrainingSection(from: decoder))
        case "AmrapOrForTimeTrainingSection":
            self = .amrapOrForTimeTrainingSection(try AmrapOrForTimeTrainingSection(from: decoder))
        case "EMOM":
            self = .emomTrainingSection(try EmomTrainingSection(from: decoder))
        case "EmomTrainingSection":
            self = .emomTrainingSection(try EmomTrainingSection(from: decoder))
        case "FOR_TIME":
            self = .amrapOrForTimeTrainingSection(try AmrapOrForTimeTrainingSection(from: decoder))
        case "REST":
            self = .restTrainingSection(try RestTrainingSection(from: decoder))
        case "RestTrainingSection":
            self = .restTrainingSection(try RestTrainingSection(from: decoder))
        default:
            throw DecodingError.dataCorrupted(DecodingError.Context.init(codingPath: decoder.codingPath, debugDescription: "Couldn't find type to decode with discriminator \(discriminator)"))
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .emomTrainingSection(let content):
            try container.encode(content)
        case .restTrainingSection(let content):
            try container.encode(content)
        case .amrapOrForTimeTrainingSection(let content):
            try container.encode(content)
        }
    }
}
