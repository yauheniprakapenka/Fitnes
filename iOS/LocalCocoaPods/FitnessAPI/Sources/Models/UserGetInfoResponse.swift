//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class UserGetInfoResponse: APIModel {

    public var data: DataType

    public class DataType: APIModel {

        public var id: String

        public var attribures: Attribures?

        public class Attribures: APIModel {

            public var email: String

            public var firstName: String?

            public var lastName: String?

            public var phone: String?

            public init(email: String, firstName: String?, lastName: String?, phone: String?) {
                self.email = email
                self.firstName = firstName
                self.lastName = lastName
                self.phone = phone
            }

            public required init(from decoder: Decoder) throws {
                let container = try decoder.container(keyedBy: StringCodingKey.self)

                email = try container.decode("email")
                firstName = try container.decodeIfPresent("first-name")
                lastName = try container.decodeIfPresent("last-name")
                phone = try container.decodeIfPresent("phone")
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.container(keyedBy: StringCodingKey.self)

                try container.encode(email, forKey: "email")
                try container.encodeIfPresent(firstName, forKey: "first-name")
                try container.encodeIfPresent(lastName, forKey: "last-name")
                try container.encodeIfPresent(phone, forKey: "phone")
            }

            public func isEqual(to object: Any?) -> Bool {
              guard let object = object as? Attribures else { return false }
              guard self.email == object.email else { return false }
              guard self.firstName == object.firstName else { return false }
              guard self.lastName == object.lastName else { return false }
              guard self.phone == object.phone else { return false }
              return true
            }

            public static func == (lhs: Attribures, rhs: Attribures) -> Bool {
                return lhs.isEqual(to: rhs)
            }
        }

        public init(id: String, attribures: Attribures? = nil) {
            self.id = id
            self.attribures = attribures
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            id = try container.decode("id")
            attribures = try container.decodeIfPresent("attribures")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encode(id, forKey: "id")
            try container.encodeIfPresent(attribures, forKey: "attribures")
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? DataType else { return false }
          guard self.id == object.id else { return false }
          guard self.attribures == object.attribures else { return false }
          return true
        }

        public static func == (lhs: DataType, rhs: DataType) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(data: DataType) {
        self.data = data
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        data = try container.decode("data")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(data, forKey: "data")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? UserGetInfoResponse else { return false }
      guard self.data == object.data else { return false }
      return true
    }

    public static func == (lhs: UserGetInfoResponse, rhs: UserGetInfoResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
