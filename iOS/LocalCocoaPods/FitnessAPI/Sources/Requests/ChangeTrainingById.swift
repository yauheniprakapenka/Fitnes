//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension FitnessAPI {

    /** Used to change training */
    public enum ChangeTrainingById {

        public static let service = APIService<Response>(id: "changeTrainingById", tag: "", method: "PUT", path: "/api/v1/trainings", hasBody: true, securityRequirements: [])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** value should be bearer: #{token_id} */
                public var authorization: String

                /** id */
                public var id: Int

                public init(authorization: String, id: Int) {
                    self.authorization = authorization
                    self.id = id
                }
            }

            public var options: Options

            public var body: Training

            public init(body: Training, options: Options, encoder: RequestEncoder? = nil) {
                self.body = body
                self.options = options
                super.init(service: ChangeTrainingById.service) { defaultEncoder in
                    return try (encoder ?? defaultEncoder).encode(body)
                }
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(authorization: String, id: Int, body: Training) {
                let options = Options(authorization: authorization, id: id)
                self.init(body: body, options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "id" + "}", with: "\(self.options.id)")
            }

            override var headerParameters: [String: String] {
                var headers: [String: String] = [:]
                headers["authorization"] = options.authorization
                return headers
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = Void

            /** Ok, training changed */
            case status200

            public var success: Void? {
                switch self {
                case .status200: return ()
                }
            }

            public var response: Any {
                switch self {
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = .status200
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
